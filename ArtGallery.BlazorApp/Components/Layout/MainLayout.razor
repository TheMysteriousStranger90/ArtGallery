@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Serilog
@inherits LayoutComponentBase
@implements IDisposable

<div class="page">
    <main>
        <div class="top-row px-4">
            @if (IsLayoutInitialized)
            {
                <AuthorizeView>
                    <Authorized>
                        <span>Hello, @context.User.Identity?.Name!</span>
                        <a href="/logout" class="btn btn-outline-secondary btn-sm">Logout</a>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/login" class="btn btn-primary btn-sm">Login</a>
                    </NotAuthorized>
                    <Authorizing>
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Loading...</span>
                    </Authorizing>
                </AuthorizeView>
            }
            else
            {
                <div class="d-flex align-items-center">
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <span>Initializing...</span>
                </div>
            }
        </div>

        <article class="content px-4">
            @if (HasLayoutError)
            {
                <div class="alert alert-danger m-4">
                    <h4>Layout Error</h4>
                    <p>@LayoutErrorMessage</p>
                    <button class="btn btn-primary" @onclick="RetryLayoutInitialization">
                        <i class="fas fa-redo me-2"></i>
                        Retry
                    </button>
                </div>
            }
            else
            {
                <ErrorBoundary>
                    <ChildContent>
                        @Body
                    </ChildContent>
                    <ErrorContent Context="exception">
                        <div class="alert alert-danger m-4">
                            <h4>Page Error</h4>
                            <p>An error occurred while rendering this page.</p>
                            <details>
                                <summary>Error Details</summary>
                                <pre class="mt-2">@exception.ToString()</pre>
                            </details>
                            <button class="btn btn-primary mt-2" @onclick="ReloadPage">
                                <i class="fas fa-refresh me-2"></i>
                                Reload Page
                            </button>
                        </div>
                    </ErrorContent>
                </ErrorBoundary>
            }
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .top-row {
        background-color: #212121;
        border-bottom: 1px solid #424242;
        padding: 0.75rem 1rem;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        color: #F5F5F5;
    }
    
    .top-row a,
    .top-row span,
    .top-row .btn {
        color: #F5F5F5 !important;
    }

    .top-row a:hover {
        color: #D7CCC8 !important;
    }

    .top-row .btn-outline-secondary {
        border-color: #F5F5F5;
        color: #F5F5F5;
    }

    .top-row .btn-outline-secondary:hover {
        background-color: #F5F5F5;
        color: #212121;
    }

    .top-row .btn-primary {
        background-color: #5D4037;
        border-color: #5D4037;
    }

    .top-row .btn-primary:hover {
        background-color: #4E342E;
        border-color: #4E342E;
    }

    .content {
        flex: 1;
    }

    #blazor-error-ui {
        background: #212121;
        color: #F5F5F5;
        bottom: 0;
        box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
        display: none;
        left: 0;
        padding: 0.6rem 1.25rem 0.7rem 1.25rem;
        position: fixed;
        width: 100%;
        z-index: 1000;
    }

    #blazor-error-ui .dismiss {
        cursor: pointer;
        position: absolute;
        right: 0.75rem;
        top: 0.5rem;
        color: #F5F5F5;
    }

    #blazor-error-ui a {
        color: #D7CCC8;
    }

    #blazor-error-ui a:hover {
        color: #F5F5F5;
    }
</style>

@code {
    private static readonly ILogger Logger = Log.ForContext<MainLayout>();

    private bool IsLayoutInitialized = false;
    private bool HasLayoutError = false;
    private string LayoutErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.Information("MainLayout: Starting initialization");

            await Task.Delay(100);

            IsLayoutInitialized = true;
            Logger.Information("MainLayout: Initialization completed successfully");
        }
        catch (Exception ex)
        {
            Logger.Error(ex, "MainLayout: Error during initialization");
            HasLayoutError = true;
            LayoutErrorMessage = $"Layout initialization failed: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RetryLayoutInitialization()
    {
        Logger.Information("MainLayout: Retrying initialization");
        HasLayoutError = false;
        LayoutErrorMessage = string.Empty;
        IsLayoutInitialized = false;
        StateHasChanged();

        await OnInitializedAsync();
    }

    private void ReloadPage()
    {
        Logger.Information("MainLayout: Reloading page requested");
        Navigation.Refresh(forceReload: true);
    }

    public void Dispose()
    {
        Logger.Debug("MainLayout: Component disposed");
    }

    [Inject] private NavigationManager Navigation { get; set; } = default!;
}