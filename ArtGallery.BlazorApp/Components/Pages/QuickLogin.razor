@* filepath: ArtGallery.BlazorApp/Components/Auth/QuickLogin.razor *@
@using ArtGallery.BlazorApp.ViewModels
@using ArtGallery.BlazorApp.Services
@using ArtGallery.BlazorApp.Services.Interfaces
@inject IAuthService AuthService
@inject ILogger<QuickLogin> Logger

<div class="quick-auth-form">
    <EditForm Model="@_viewModel" OnValidSubmit="@HandleLogin" novalidate>
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(_viewModel.ErrorMessage))
        {
            <div class="alert alert-danger alert-sm" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                @_viewModel.ErrorMessage
            </div>
        }

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-envelope"></i>
                </span>
                <InputText class="form-control" 
                         @bind-Value="_viewModel.Email" 
                         placeholder="Email"
                         disabled="@_viewModel.IsLoading" />
            </div>
            <ValidationMessage For="@(() => _viewModel.Email)" class="text-danger small" />
        </div>

        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="fas fa-lock"></i>
                </span>
                <InputText type="@(_viewModel.ShowPassword ? "text" : "password")"
                         class="form-control" 
                         @bind-Value="_viewModel.Password" 
                         placeholder="Password"
                         disabled="@_viewModel.IsLoading" />
                <button class="btn btn-outline-secondary" 
                        type="button" 
                        @onclick="@(() => _viewModel.ShowPassword = !_viewModel.ShowPassword)"
                        disabled="@_viewModel.IsLoading">
                    <i class="fas @(_viewModel.ShowPassword ? "fa-eye-slash" : "fa-eye")"></i>
                </button>
            </div>
            <ValidationMessage For="@(() => _viewModel.Password)" class="text-danger small" />
        </div>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="form-check">
                <InputCheckbox class="form-check-input" 
                             @bind-Value="_viewModel.RememberMe"
                             disabled="@_viewModel.IsLoading" />
                <label class="form-check-label small">Remember me</label>
            </div>
            <a href="/forgot-password" class="text-decoration-none small">Forgot?</a>
        </div>

        <button type="submit" 
                class="btn btn-primary w-100"
                disabled="@(_viewModel.IsLoading || !_viewModel.CanAttemptLogin())">
            @if (_viewModel.IsLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <i class="fas fa-sign-in-alt me-2"></i>Sign In
        </button>
    </EditForm>
</div>

@code {
    [Parameter] public EventCallback OnLoginSuccess { get; set; }
    
    private LoginViewModel _viewModel = new();

    private async Task HandleLogin()
    {
        if (!_viewModel.CanAttemptLogin()) return;

        try
        {
            _viewModel.SetLoading(true);
            StateHasChanged();

            var command = _viewModel.ToCommand();
            var success = await AuthService.Login(command);

            if (success)
            {
                Logger.LogInformation("Quick login successful for: {Email}", _viewModel.Email);
                await OnLoginSuccess.InvokeAsync();
            }
            else
            {
                _viewModel.SetError("Invalid credentials");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Quick login error for: {Email}", _viewModel.Email);
            _viewModel.SetError(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
}