@using ArtGallery.ClientApp.Services
@using ArtGallery.ClientApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject IPaintingService PaintingService
@inject ILogger<PaintingCard> Logger

@if (!string.IsNullOrEmpty(Painting?.ImageUrl))
{
    <div class="card-img-container">
        <a href="@($"/paintings/{Painting.Id}")">
            <img src="@GetFullImageUrl(Painting.ImageUrl)" class="card-img-top" alt="@Painting.Title">
        </a>
    </div>
}
else
{
    <div class="card-img-container">
        <a href="@($"/paintings/{Painting.Id}")">
            <div class="card-img-placeholder d-flex align-items-center justify-content-center">
                <i class="bi bi-image text-muted"></i>
                <span>No Image Available</span>
            </div>
        </a>
    </div>
}
<div class="card-body d-flex flex-column text-center">
    <h5 class="card-title">
        <a href="@($"/paintings/{Painting.Id}")" class="text-decoration-none">@Painting?.Title</a>
    </h5>
    <p class="card-text small">
        <i class="bi bi-person me-1"></i>
        <span class="field-label">Artist: </span>
        @Painting?.Artist.FullName
    </p>
    @if (Painting?.CreationYear > 0)
    {
        <p class="card-text small">
            <i class="bi bi-calendar me-1"></i>
            <span class="field-label">Year: </span>
            <small>@Painting.CreationYear</small>
        </p>
    }
    @if (!string.IsNullOrEmpty(Painting?.Genre?.Name))
    {
        <p class="card-text small">
            <i class="bi bi-palette me-1"></i>
            <span class="field-label">Genre: </span>
            <small>@Painting.Genre.Name</small>
        </p>
    }
</div>
<div class="card-footer">
    <div class="d-flex gap-2">
        <a href="@($"/paintings/{Painting.Id}")" class="btn btn-outline-primary flex-grow-1">
            <i class="bi bi-eye me-1"></i> View Details
        </a>

        @if (isAuthenticated)
        {
            <button class="btn @GetFavoriteButtonClass() favorite-btn"
                    @onclick="AddToFavorites" 
                    disabled="@(isFavoriteProcessing || isAddedToFavorites)" 
                    title="@(isAddedToFavorites ? "Already in favorites" : "Add to favorites")">
                @if (isFavoriteProcessing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
                else
                {
                    <i class="bi bi-heart@(isAddedToFavorites ? "-fill" : "") heart-icon @(isAddedToFavorites ? "heart-filled" : "")" aria-hidden="true"></i>
                }
            </button>
        }
        }
    </div>

    @if (isAddedToFavorites)
    {
    <div class="mt-2 favorite-confirmation">
        <small>
            <i class="bi bi-check-circle me-1"></i> Added to favorites
        </small>
    </div>
    }
</div>

@code {
    [Parameter] public PaintingDto? Painting { get; set; }
    [Inject] public IConfiguration? Configuration { get; set; }

    private bool isAuthenticated = false;
    private bool isAddedToFavorites = false;
    private bool isFavoriteProcessing = false;

    private async Task CheckIfInFavorites()
    {
        if (Painting == null || !isAuthenticated)
            return;

        try
        {
            var favorites = await PaintingService.GetFavoritePaintingsAsync();
            if (favorites.Success && favorites.FavoritePaintings.Any(p => p.Id == Painting.Id))
            {
                isAddedToFavorites = true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking if painting is in favorites: {PaintingId}", Painting.Id);
        }
    }
    
    private string GetFavoriteButtonClass()
    {
        if (isFavoriteProcessing)
            return "btn-outline-secondary disabled";
        if (isAddedToFavorites)
            return "btn-dark favorited";
        return "btn-outline-primary";
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    
        if (isAuthenticated)
        {
            await CheckIfInFavorites();
        }
    }

    private string GetFullImageUrl(string? relativeUrl)
    {
        if (string.IsNullOrEmpty(relativeUrl))
        {
            return "placeholder-image.png";
        }

        if (Uri.TryCreate(relativeUrl, UriKind.Absolute, out _))
        {
            return relativeUrl;
        }

        var apiBaseUrl = Configuration?["ApiBaseUrl"];
        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            return relativeUrl.StartsWith("/") ? relativeUrl : $"/{relativeUrl}";
        }

        return $"{apiBaseUrl.TrimEnd('/')}/{relativeUrl.TrimStart('/')}";
    }

    private async Task AddToFavorites()
    {
        if (Painting == null || isFavoriteProcessing)
            return;

        try
        {
            isFavoriteProcessing = true;
            StateHasChanged();

            var result = await PaintingService.AddPaintingToFavoritesAsync(Painting.Id);

            if (result)
            {
                isAddedToFavorites = true;
                await Task.Delay(2000);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding painting to favorites: {PaintingId}", Painting.Id);
        }
        finally
        {
            isFavoriteProcessing = false;
            StateHasChanged();
        }
    }

}