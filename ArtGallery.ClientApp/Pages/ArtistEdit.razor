@page "/admin/artists/edit/{Id:guid}"
@using ArtGallery.ClientApp.Services
@using ArtGallery.ClientApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using ArtGallery.ClientApp.ViewModels
@inject IArtistService ArtistService
@inject NavigationManager NavigationManager
@inject ILogger<ArtistEdit> Logger
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator")]

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb" class="my-3">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/">Home</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/artists">Artists</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Edit Artist</li>
                </ol>
            </nav>
            <h1 class="mb-4" style="color: var(--brand-secondary); font-weight: 300; font-size: 2.5rem; 
                        border-bottom: 1px solid var(--border-color); padding-bottom: 0.75rem;">
                Edit Artist
            </h1>

            @if (isLoading)
            {
                <div class="loading-container">
                    <div class="spinner-border loading-spinner" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="loading-text">Loading artist data...</p>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger">
                    <h4 class="alert-heading">Error</h4>
                    <p>@errorMessage</p>
                    <hr>
                    <div>
                        <button class="btn btn-primary" @onclick="LoadData">Try Again</button>
                        <a href="/artists" class="btn btn-outline-secondary ms-2">Return to Artists</a>
                    </div>
                </div>
            }
            else if (model != null)
            {
                <EditForm Model="model" OnValidSubmit="HandleValidSubmit" class="painting-edit-form">
                    <DataAnnotationsValidator/>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="card shadow-sm mb-4">
                                <div class="card-header">
                                    <h4 class="mb-0" style="color: var(--brand-secondary); font-weight: 300; font-size: 1.75rem;">Basic Information</h4>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="firstName" class="form-label">First Name</label>
                                            <InputText id="firstName" class="form-control" @bind-Value="model.FirstName"/>
                                            <ValidationMessage For="@(() => model.FirstName)" class="text-danger"/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <label for="lastName" class="form-label">Last Name</label>
                                            <InputText id="lastName" class="form-control" @bind-Value="model.LastName"/>
                                            <ValidationMessage For="@(() => model.LastName)" class="text-danger"/>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label for="birthDate" class="form-label">Birth Date</label>
                                            <InputDate id="birthDate" class="form-control" @bind-Value="model.BirthDate"/>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <label for="deathDate" class="form-label">Death Date</label>
                                            <InputDate id="deathDate" class="form-control" @bind-Value="model.DeathDate"/>
                                        </div>
                                    </div>

                                    <div class="mb-3">
                                        <label for="nationality" class="form-label">Nationality</label>
                                        <InputText id="nationality" class="form-control" @bind-Value="model.Nationality"/>
                                        <ValidationMessage For="@(() => model.Nationality)" class="text-danger"/>
                                        <small class="form-text text-light">E.g., Italian, French, Russian</small>
                                    </div>
                                </div>
                            </div>

                            <div class="card shadow-sm mb-4">
                                <div class="card-header">
                                    <h4 class="mb-0" style="color: var(--brand-secondary); font-weight: 300; font-size: 1.75rem;">Biography</h4>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label for="biographyShortDescription" class="form-label">Short Description</label>
                                        <InputTextArea id="biographyShortDescription" class="form-control" rows="2" @bind-Value="model.BiographyShortDescription"/>
                                        <ValidationMessage For="@(() => model.BiographyShortDescription)" class="text-danger"/>
                                        <small class="form-text text-light">A brief summary of the artist's life and importance (500 characters max)</small>
                                    </div>

                                    <div class="mb-3">
                                        <label for="biographyContent" class="form-label">Full Biography</label>
                                        <InputTextArea id="biographyContent" class="form-control" rows="10" @bind-Value="model.BiographyContent"/>
                                        <small class="form-text text-light">The detailed biography. You can use line breaks for paragraphs.</small>
                                    </div>

                                    <div class="mb-3">
                                        <label for="biographyReferences" class="form-label">References & Further Reading</label>
                                        <InputTextArea id="biographyReferences" class="form-control" rows="4" @bind-Value="model.BiographyReferences"/>
                                        <small class="form-text text-light">Optional. Books, articles or websites about the artist.</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="card shadow-sm mb-4">
                                <div class="card-header">
                                    <h4 class="mb-0" style="color: var(--brand-secondary); font-weight: 300; font-size: 1.75rem;">Artist Image</h4>
                                </div>
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(artist?.PictureUrl))
                                    {
                                        <div class="text-center mb-3">
                                            <img src="@artist.PictureUrl" class="img-fluid mb-2"
                                                 style="width: 100%; height: auto; border-radius: 0.5rem; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);"
                                                 alt="@artist.FullName"/>
                                            <div class="form-check">
                                                <InputCheckbox id="keepExistingImage" class="form-check-input" @bind-Value="model.KeepExistingImage"/>
                                                <label class="form-check-label" for="keepExistingImage">
                                                    Keep existing image
                                                </label>
                                            </div>
                                        </div>
                                    }

                                    <div class="mb-3">
                                        <label for="imageFile" class="form-label">Upload new image</label>
                                        <InputFile id="imageFile" OnChange="HandleFileSelected" class="form-control" accept="image/*"/>
                                        <small class="form-text text-light">Recommended size: 800x1200px portrait. Max file size: 5MB.</small>

                                        @if (selectedFile != null)
                                        {
                                            <div class="mt-2">
                                                <span class="badge bg-info">Selected: @selectedFile.Name (@FormatFileSize(selectedFile.Size))</span>
                                            </div>
                                        }
                                    </div>

                                    @if (imagePreviewUrl != null)
                                    {
                                        <div class="text-center mt-3">
                                            <h6>Preview:</h6>
                                            <img src="@imagePreviewUrl" class="img-fluid painting-preview border" alt="Preview"/>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="card shadow-sm mb-4">
                                <div class="card-header">
                                    <h4 class="mb-0" style="color: var(--brand-secondary); font-weight: 300; font-size: 1.75rem;">Paintings</h4>
                                </div>
                                <div class="card-body">
                                    @if (artist?.Paintings?.Any() == true)
                                    {
                                        <p>This artist has @artist.Paintings.Count painting(s) in the gallery.</p>
                                        <small class="form-text text-light">
                                            Note: Changing artist details will affect all associated paintings.
                                        </small>
                                    }
                                    else
                                    {
                                        <p>This artist has no paintings in the gallery yet.</p>
                                    }
                                </div>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-outline-secondary flex-grow-1" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                                <a href="@($"/artists/{Id}")" class="btn btn-outline-secondary">Cancel</a>
                            </div>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    private ArtistDetailDto artist;
    private ArtistEditModel model;
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage;
    private IBrowserFile selectedFile;
    private string imagePreviewUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            artist = await ArtistService.GetArtistAsync(Id);

            if (artist == null)
            {
                errorMessage = "Artist not found. They may have been deleted or you don't have permission to edit them.";
                return;
            }

            model = new ArtistEditModel
            {
                FirstName = artist.FirstName,
                LastName = artist.LastName,
                BirthDate = artist.BirthDate,
                DeathDate = artist.DeathDate,
                Nationality = artist.Nationality,
                KeepExistingImage = true,
                BiographyContent = artist.Biography?.Content,
                BiographyShortDescription = artist.Biography?.ShortDescription,
                BiographyReferences = artist.Biography?.References
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading artist data for editing. ID: {ArtistId}", Id);
            errorMessage = "Failed to load artist data. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        model.KeepExistingImage = false;

        try
        {
            var imageFile = e.File;
            if (imageFile.Size > 5 * 1024 * 1024)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Image is too large. Maximum file size is 5MB.");
                selectedFile = null;
                return;
            }

            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(5 * 1024 * 1024).ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            var fileFormat = imageFile.ContentType;

            imagePreviewUrl = $"data:{fileFormat};base64,{imageBase64}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating image preview");
            imagePreviewUrl = null;
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;

        try
        {
            Logger.LogInformation("Starting artist update for ID: {ArtistId}", Id);
            Logger.LogInformation("Model values: FirstName={FirstName}, LastName={LastName}, " +
                                  "BirthDate={BirthDate}, DeathDate={DeathDate}, Nationality={Nationality}, " +
                                  "KeepExistingImage={KeepExistingImage}",
                model.FirstName, model.LastName, model.BirthDate, model.DeathDate,
                model.Nationality, model.KeepExistingImage);

            Logger.LogInformation("Biography: ID={BiographyId}, ContentLength={ContentLength}, " +
                                  "ShortDescriptionLength={ShortDescriptionLength}, ReferencesLength={ReferencesLength}",
                artist.Biography?.Id ?? Guid.Empty,
                model.BiographyContent?.Length ?? 0,
                model.BiographyShortDescription?.Length ?? 0,
                model.BiographyReferences?.Length ?? 0);

            FileParameter? imageFile = null;
            if (selectedFile != null)
            {
                Logger.LogInformation("Processing selected image file: Name={FileName}, Size={FileSize}, Type={ContentType}",
                    selectedFile.Name, selectedFile.Size, selectedFile.ContentType);

                var ms = new MemoryStream();
                await selectedFile.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
                ms.Position = 0;

                imageFile = new FileParameter(ms, selectedFile.Name, selectedFile.ContentType);
                Logger.LogInformation("Image file prepared successfully");
            }
            else
            {
                Logger.LogInformation("No new image file selected. KeepExistingImage={KeepExistingImage}",
                    model.KeepExistingImage);
            }

            var biographyDto = new BiographyDto
            {
                Id = artist.Biography?.Id ?? Guid.Empty,
                Content = model.BiographyContent,
                ShortDescription = model.BiographyShortDescription,
                References = model.BiographyReferences
            };

            Logger.LogInformation("Calling ArtistService.UpdateArtistAsync...");

            var result = await ArtistService.UpdateArtistAsync(
                Id,
                model.FirstName,
                model.LastName,
                model.BirthDate,
                model.DeathDate,
                model.Nationality,
                imageFile,
                model.KeepExistingImage,
                biographyDto
            );

            Logger.LogInformation("Artist update successful. Result: {ArtistId}, {FirstName} {LastName}",
                result.Id, result.FirstName, result.LastName);

            await JSRuntime.InvokeVoidAsync("alert", "Artist successfully updated!");
            NavigationManager.NavigateTo($"/artists/{Id}");
        }
        catch (ApiException ex)
        {
            Logger.LogError(ex, "API error updating artist. Status: {StatusCode}, Response: {Response}, Message: {Message}",
                ex.StatusCode, ex.Response, ex.Message);

            if (ex.GetType().GetProperty("Request") != null)
            {
                var request = ex.GetType().GetProperty("Request").GetValue(ex);
                Logger.LogError("Request details: {Request}", request);
            }

            await JSRuntime.InvokeVoidAsync("alert", $"Error updating artist: {ex.Message}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error updating artist. Message: {Message}, Type: {ExceptionType}",
                ex.Message, ex.GetType().FullName);

            if (ex.InnerException != null)
            {
                Logger.LogError("Inner exception: {InnerMessage}, Type: {InnerType}",
                    ex.InnerException.Message, ex.InnerException.GetType().FullName);
            }

            await JSRuntime.InvokeVoidAsync("alert", "An unexpected error occurred while updating the artist. Please try again later.");
        }
        finally
        {
            isSaving = false;
        }
    }

}