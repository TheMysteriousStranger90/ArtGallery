@page "/exhibitions/{Id:guid}"
@using ArtGallery.ClientApp.Services
@using ArtGallery.ClientApp.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject IExhibitionsService ExhibitionsService
@inject IPaintingService PaintingService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<ExhibitionDetail> Logger
@inject IJSRuntime JSRuntime

<PageTitle>@(exhibition?.Title ?? "Exhibition Details")</PageTitle>

<div class="exhibition-detail-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border loading-spinner" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="loading-text">Loading exhibition details...</p>
        </div>
    }
    else if (exhibition != null)
    {
        <div class="row mb-4">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/exhibitions">Exhibitions</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@exhibition.Title</li>
                    </ol>
                </nav>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h1 class="exhibition-title">@exhibition.Title</h1>
                    <span class="badge @GetStatusBadgeClass(exhibition.Status) fs-6">@exhibition.Status</span>
                </div>
                
                <div class="exhibition-details mb-4">
                    <p class="text-muted">
                        <i class="bi bi-calendar-event me-2"></i>@exhibition.FormattedDateRange
                    </p>
                    <p class="text-muted">
                        <i class="bi bi-building me-2"></i>@(exhibition.Museum?.Name ?? "No museum specified")
                        @if (!string.IsNullOrEmpty(exhibition.ExternalVenueAddress))
                        {
                            <span> - @exhibition.ExternalVenueAddress</span>
                        }
                    </p>
                </div>
                
                <div class="exhibition-description mb-4">
                    <h3>About this Exhibition</h3>
                    <p>@exhibition.Description</p>
                </div>
            </div>
        </div>
        
        @if (exhibition.Paintings != null && exhibition.Paintings.Any())
        {
            <div class="row mb-5">
                <div class="col-12">
                    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
                        @foreach (var painting in exhibition.Paintings)
                        {
                            <div class="col">
                                <div class="card h-100 painting-card">
                                    <div class="painting-image-container">
                                        <img src="@painting.ImageUrl" class="card-img-top painting-image" alt="@painting.Title" />
                                    </div>
                                    <div class="card-body">
                                        <h5 class="card-title">@painting.Title</h5>
                                        <p class="card-text text-muted">@painting.ArtistName</p>
                                        <p class="card-text"><small class="text-muted">@painting.CreationYear</small></p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            @if (isAdministrator)
            {
                <div class="row mt-4 mb-5">
                    <div class="col-12">
                        <div class="card add-painting-card">
                            <div class="card-body">
                                <h5 class="card-title">Add Painting to Exhibition</h5>
                                <div class="input-group">
                                    <select class="form-select" @bind="selectedPaintingId">
                                        <option value="">Select a painting...</option>
                                        @if (availablePaintings != null)
                                        {
                                            @foreach (var painting in availablePaintings)
                                            {
                                                <option value="@painting.Id">@painting.Title (@painting.Artist?.FullName)</option>
                                            }
                                        }
                                    </select>
                                    <button class="btn btn-primary" type="button" @onclick="AddPaintingToExhibition" disabled="@string.IsNullOrEmpty(selectedPaintingId?.ToString())">
                                        <i class="bi bi-plus-lg me-1"></i> Add
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="row mb-5">
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        No paintings have been added to this exhibition yet.
                    </div>
                    
                    @if (isAdministrator)
                    {
                        <div class="card mt-4">
                            <div class="card-body">
                                <h5 class="card-title">Add Painting to Exhibition</h5>
                                <div class="input-group">
                                    <select class="form-select" @bind="selectedPaintingId">
                                        <option value="">Select a painting...</option>
                                        @if (availablePaintings != null)
                                        {
                                            @foreach (var painting in availablePaintings)
                                            {
                                                <option value="@painting.Id">@painting.Title (@painting.Artist?.FullName)</option>
                                            }
                                        }
                                    </select>
                                    <button class="btn btn-primary" type="button" @onclick="AddPaintingToExhibition" disabled="@string.IsNullOrEmpty(selectedPaintingId?.ToString())">
                                        <i class="bi bi-plus-lg me-1"></i> Add
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
        </div>
        <div class="mt-3">
            <a href="/exhibitions" class="btn btn-primary">
                <i class="bi bi-arrow-left me-2"></i>Back to Exhibitions
            </a>
        </div>
    }
</div>

@code {
    [Parameter] public Guid Id { get; set; }
    private ExhibitionDetailDto exhibition;
    private List<PaintingDto> availablePaintings;
    private Guid? selectedPaintingId;
    private bool isLoading = true;
    private string errorMessage;
    private bool isAdministrator = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        isAdministrator = authState.User.IsInRole("Administrator");
        
        if (isAdministrator)
        {
            await LoadAvailablePaintings();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadExhibition();
    }

    private async Task LoadExhibition()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            exhibition = await ExhibitionsService.GetExhibitionByIdAsync(Id);
        
            if (exhibition == null)
            {
                errorMessage = "Exhibition not found";
            }
        }
        catch (ApiException ex)
        {
            Logger.LogError(ex, "API Error loading exhibition. Status: {StatusCode}, Response: {Response}", ex.StatusCode, ex.Response);
            errorMessage = $"API Error: {ex.Message} (Status: {ex.StatusCode})";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading exhibition {ExhibitionId}", Id);
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadAvailablePaintings()
    {
        try
        {
            var paginatedResult = await PaintingService.GetPaintingsAsync(
                pageIndex: 1, 
                pageSize: 100, 
                search: "", 
                artistId: null, 
                genreId: null, 
                museumId: null, 
                paintType: null, 
                fromYear: null, 
                toYear: null, 
                sort: "title"
            );
            availablePaintings = paginatedResult.Data.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available paintings");
            availablePaintings = new List<PaintingDto>();
        }
    }
    
    private async Task AddPaintingToExhibition()
    {
        if (!selectedPaintingId.HasValue)
            return;
        
        try
        {
            bool success = await ExhibitionsService.AddPaintingToExhibitionAsync(Id, selectedPaintingId.Value);
        
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Painting added to exhibition successfully");
                selectedPaintingId = null;
                await LoadExhibition();
            
                if (availablePaintings != null)
                {
                    availablePaintings.RemoveAll(p => p.Id == selectedPaintingId);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to add painting to exhibition");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding painting {PaintingId} to exhibition {ExhibitionId}", selectedPaintingId, Id);
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }
    
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Current" => "bg-success",
            "Upcoming" => "bg-primary",
            "Past" => "bg-secondary",
            _ => "bg-info"
        };
    }
}