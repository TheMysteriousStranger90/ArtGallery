// <auto-generated />
using System;
using ArtGallery.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtGallery.Persistence.Migrations
{
    [DbContext(typeof(ArtGalleryDbContext))]
    partial class ArtGalleryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtGallery.Domain.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21122"),
                            BirthDate = new DateTime(1848, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1302),
                            DeathDate = new DateTime(1926, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Viktor",
                            IsDeleted = false,
                            LastName = "Vasnetsov",
                            Nationality = "Russian"
                        },
                        new
                        {
                            Id = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21123"),
                            BirthDate = new DateTime(1856, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1305),
                            DeathDate = new DateTime(1910, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Mikhail",
                            IsDeleted = false,
                            LastName = "Vrubel",
                            Nationality = "Russian"
                        },
                        new
                        {
                            Id = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21124"),
                            BirthDate = new DateTime(1817, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1309),
                            DeathDate = new DateTime(1900, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ivan",
                            IsDeleted = false,
                            LastName = "Aivazovsky",
                            Nationality = "Russian"
                        },
                        new
                        {
                            Id = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21125"),
                            BirthDate = new DateTime(1830, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1313),
                            DeathDate = new DateTime(1897, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alexei",
                            IsDeleted = false,
                            LastName = "Savrasov",
                            Nationality = "Russian"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.ArtistImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c6aeae0-5c40-4085-8993-7d7b5db21130"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21122"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1399),
                            IsDeleted = false,
                            IsMain = true,
                            PictureUrl = "https://upload.wikimedia.org/wikipedia/commons/2/29/Viktor_Vasnetsov_-_Self-portrait_-_Google_Art_Project.jpg",
                            PublicId = "artist_vasnetsov"
                        },
                        new
                        {
                            Id = new Guid("0c6aeae0-5c40-4085-8993-7d7b5db21131"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21123"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1404),
                            IsDeleted = false,
                            IsMain = true,
                            PictureUrl = "https://upload.wikimedia.org/wikipedia/commons/7/7f/Vrubel_Self-Portrait_1882.jpg",
                            PublicId = "artist_vrubel"
                        },
                        new
                        {
                            Id = new Guid("0c6aeae0-5c40-4085-8993-7d7b5db21132"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21124"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1406),
                            IsDeleted = false,
                            IsMain = true,
                            PictureUrl = "https://upload.wikimedia.org/wikipedia/commons/b/b5/Aivazovsky_-_Self-portrait_1874.jpg",
                            PublicId = "artist_aivazovsky"
                        },
                        new
                        {
                            Id = new Guid("0c6aeae0-5c40-4085-8993-7d7b5db21133"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21125"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1409),
                            IsDeleted = false,
                            IsMain = true,
                            PictureUrl = "https://upload.wikimedia.org/wikipedia/commons/9/9f/Alexey_Savrasov.jpg",
                            PublicId = "artist_savrasov"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Biography", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("Biographies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc6aeae0-5c40-4085-8993-7d7b5db21126"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21122"),
                            Content = "Viktor Mikhailovich Vasnetsov was a Russian painter who specialized in mythological and historical subjects. He is considered the co-founder of Russian folklorist and romantic nationalistic painting and a key figure in the Russian revivalist movement. His notable works include After Prince Igor's Battle with the Polovtsy, Knight at the Crossroads, Bogatyrs, and Alyonushka.",
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1350),
                            IsDeleted = false,
                            References = "Korotkevich, V.N. Viktor Vasnetsov: The Artist's Work. Leningrad, 1962.",
                            ShortDescription = "One of the key figures in the Russian revivalist movement"
                        },
                        new
                        {
                            Id = new Guid("fc6aeae0-5c40-4085-8993-7d7b5db21127"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21123"),
                            Content = "Mikhail Aleksandrovich Vrubel was a Russian painter who specialized in symbolist paintings of mythological themes. His contemporaries often saw him as strange and mentally unstable due to his unique style of painting. At the time of his death, Vrubel was among the most controversial painters in Russian art. His innovative art is now considered a bridge connecting the traditional art of the 19th century with the modernism of the 20th century.",
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1355),
                            IsDeleted = false,
                            References = "Gomberg-Verzhbinskaia, E.P. Vrubel. Moscow, 1959.",
                            ShortDescription = "A Russian symbolist painter known for his unusual style and technique"
                        },
                        new
                        {
                            Id = new Guid("fc6aeae0-5c40-4085-8993-7d7b5db21128"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21124"),
                            Content = "Ivan Konstantinovich Aivazovsky was a Russian Romantic painter who is considered one of the greatest masters of marine art. He was born into an Armenian family in the town of Feodosia in Crimea and was mostly known for his seascapes, which constitute more than half of his paintings. During his almost 60-year career, he created around 6,000 paintings, making him one of the most prolific artists of his time.",
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1357),
                            IsDeleted = false,
                            References = "Caffiero, G., Samarine, I. Seas, Cities & Dreams: The Paintings of Ivan Aivazovsky. London, 2000.",
                            ShortDescription = "One of the greatest masters of marine art in history"
                        },
                        new
                        {
                            Id = new Guid("fc6aeae0-5c40-4085-8993-7d7b5db21129"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21125"),
                            Content = "Alexei Kondratyevich Savrasov was a Russian landscape painter and creator of the 'mood landscape' genre. He is credited with developing the lyrical landscape style, and his painting The Rooks Have Come Back (1871) is considered one of the most significant works of Russian landscape painting. Savrasov's life was marked by personal tragedy and alcoholism in his later years, but his influence on Russian landscape painting was immense.",
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1360),
                            IsDeleted = false,
                            References = "Novouspensky, N. Alexei Savrasov. Leningrad, 1982.",
                            ShortDescription = "Founder of the lyrical landscape style in Russian painting"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c6aeae0-5c40-4085-8993-7d7b5db21107"),
                            CountryId = new Guid("8c6aeae0-5c40-4085-8993-7d7b5db21106"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1122),
                            IsDeleted = false,
                            Name = "Moscow"
                        },
                        new
                        {
                            Id = new Guid("9c6aeae0-5c40-4085-8993-7d7b5db21108"),
                            CountryId = new Guid("8c6aeae0-5c40-4085-8993-7d7b5db21106"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1125),
                            IsDeleted = false,
                            Name = "Saint Petersburg"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c6aeae0-5c40-4085-8993-7d7b5db21106"),
                            Code = "RU",
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(928),
                            IsDeleted = false,
                            Name = "Russia"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Exhibition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalVenueAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MuseumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Exhibitions");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21111"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1195),
                            Description = "Art depicting scenes from mythology or folklore",
                            IsDeleted = false,
                            Name = "Mythological Art"
                        },
                        new
                        {
                            Id = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21112"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1197),
                            Description = "Art depicting natural scenery, such as mountains, valleys, trees, rivers, and forests",
                            IsDeleted = false,
                            Name = "Landscape"
                        },
                        new
                        {
                            Id = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21113"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1199),
                            Description = "Art depicting the sea or maritime scenes",
                            IsDeleted = false,
                            Name = "Seascape"
                        },
                        new
                        {
                            Id = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21114"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1201),
                            Description = "Art that emphasizes the expression of ideas through symbols",
                            IsDeleted = false,
                            Name = "Symbolism"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Museum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Museums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            Address = "Lavrushinsky Ln, 10, Moscow, Russia, 119017",
                            CityId = new Guid("9c6aeae0-5c40-4085-8993-7d7b5db21107"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1166),
                            Description = "The State Tretyakov Gallery is an art gallery in Moscow, Russia, the foremost depository of Russian fine art in the world.",
                            IsDeleted = false,
                            Name = "The State Tretyakov Gallery",
                            WebsiteUrl = "https://www.tretyakovgallery.ru/en/"
                        },
                        new
                        {
                            Id = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21110"),
                            Address = "Inzhenernaya St, 4, St Petersburg, Russia, 191186",
                            CityId = new Guid("9c6aeae0-5c40-4085-8993-7d7b5db21108"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1169),
                            Description = "The State Russian Museum is the world's largest depository of Russian fine art. It is also one of the largest museums in the country.",
                            IsDeleted = false,
                            Name = "The State Russian Museum",
                            WebsiteUrl = "https://rusmuseum.ru/en/"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Painting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreationYear")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Dimensions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("MuseumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaintType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MuseumId");

                    b.ToTable("Paintings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21134"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21122"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1452),
                            CreationYear = 1898,
                            Description = "Also known as Three Bogatyrs, this painting depicts three of the most legendary bogatyrs (medieval Russian knights): Dobrynya Nikitich, Ilya Muromets and Alyosha Popovich. They are portrayed on patrol together in the frontier of the Russian land.",
                            Dimensions = "295.3 cm × 446 cm (116.3 in × 175.6 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21111"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/4/4e/Viktor_Vasnetsov_-_Bogatyrs_-_Google_Art_Project.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "Bogatyrs"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21135"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21122"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1458),
                            CreationYear = 1881,
                            Description = "A painting depicting a young woman, Alyonushka, a character from Russian folk tales, sitting forlornly by a pond. The painting is notable for its depiction of the Russian landscape and its melancholic mood.",
                            Dimensions = "177 cm × 121 cm (69.7 in × 47.6 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21111"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/9/97/Vasnetsov_Alionushka.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "Alyonushka"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21136"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21123"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1471),
                            CreationYear = 1890,
                            Description = "One of Vrubel's most famous works, depicting a winged demon sitting in a pensive pose. The painting is characterized by its unusual crystalline form and vibrant colors.",
                            Dimensions = "114 cm × 211 cm (44.9 in × 83.1 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21114"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/b/bf/Vrubel_Demon.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "Demon Seated"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21137"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21123"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1477),
                            CreationYear = 1902,
                            Description = "The last of Vrubel's Demon series, showing the defeated demon with broken wings. This painting is associated with the deterioration of Vrubel's mental health.",
                            Dimensions = "139 cm × 387 cm (54.7 in × 152.4 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21114"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/f/fc/Vrubel_Fallen_Demon.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "Demon Downcast"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21138"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21124"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1482),
                            CreationYear = 1850,
                            Description = "Aivazovsky's most famous painting, showing a group of people clinging to debris from a shipwreck, facing a large wave at sunrise. The title refers to the nautical belief that the ninth wave is the largest in a series of waves.",
                            Dimensions = "221 cm × 332 cm (87.0 in × 130.7 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21113"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/4/4a/Hovhannes_Aivazovsky_-_The_Ninth_Wave_-_Google_Art_Project.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21110"),
                            PaintType = 0,
                            Title = "The Ninth Wave"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21139"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21124"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1488),
                            CreationYear = 1849,
                            Description = "A dramatic seascape depicting a violent storm at night, with a ship struggling against massive waves. The painting showcases Aivazovsky's mastery in depicting light and water.",
                            Dimensions = "100 cm × 141 cm (39.4 in × 55.5 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21113"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/5/51/Aivazovsky%2C_Ivan_-_Storm_on_the_Sea_at_Night.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21110"),
                            PaintType = 0,
                            Title = "Storm on the Sea at Night"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21140"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21125"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1492),
                            CreationYear = 1871,
                            Description = "Savrasov's most famous work, depicting the early spring landscape with rooks nesting in birch trees. The painting conveys the sense of awakening nature and hope.",
                            Dimensions = "62 cm × 48.5 cm (24.4 in × 19.1 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21112"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/3/30/Alexei_Savrasov_-_The_Rooks_Have_Returned.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "The Rooks Have Returned"
                        },
                        new
                        {
                            Id = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21141"),
                            ArtistId = new Guid("ec6aeae0-5c40-4085-8993-7d7b5db21125"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1497),
                            CreationYear = 1873,
                            Description = "A serene landscape depicting a countryside road in rural Russia. The painting demonstrates Savrasov's talent for capturing the subtle poetry of simple Russian landscapes.",
                            Dimensions = "58.8 cm × 80.5 cm (23.1 in × 31.7 in)",
                            GenreId = new Guid("cc6aeae0-5c40-4085-8993-7d7b5db21112"),
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/7/7a/Alexei_Savrasov_-_Country_Road_-_Google_Art_Project.jpg",
                            IsDeleted = false,
                            Medium = "Oil on canvas",
                            MuseumId = new Guid("bc6aeae0-5c40-4085-8993-7d7b5db21109"),
                            PaintType = 0,
                            Title = "Countryside Road"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingExhibition", b =>
                {
                    b.Property<Guid>("PaintingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExhibitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaintingId", "ExhibitionId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("PaintingExhibitions");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaintingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaintingId");

                    b.ToTable("PaintingImages");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingTag", b =>
                {
                    b.Property<Guid>("PaintingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaintingId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PaintingTags");

                    b.HasData(
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21134"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1532),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21142"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21134"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1535),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21143"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21134"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21119"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1538),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21144"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21135"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1540),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21145"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21135"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1545),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21146"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21135"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21119"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1548),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21147"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21136"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1550),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21148"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21136"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1552),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21149"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21137"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1554),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21150"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21137"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21117"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1557),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21151"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21138"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1559),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21152"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21138"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1562),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21153"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21138"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21118"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1564),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21154"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21138"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21120"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1566),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21155"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21139"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1568),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21156"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21139"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1570),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21157"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21139"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21120"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1572),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21158"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21140"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1576),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21159"),
                            IsDeleted = false
                        },
                        new
                        {
                            PaintingId = new Guid("1c6aeae0-5c40-4085-8993-7d7b5db21141"),
                            TagId = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1578),
                            Id = new Guid("2c6aeae0-5c40-4085-8993-7d7b5db21160"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21115"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1232),
                            IsDeleted = false,
                            Name = "Russian Art"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21116"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1237),
                            IsDeleted = false,
                            Name = "19th Century"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21117"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1239),
                            IsDeleted = false,
                            Name = "Early 20th Century"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21118"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1241),
                            IsDeleted = false,
                            Name = "Romanticism"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21119"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1243),
                            IsDeleted = false,
                            Name = "Folklore"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21120"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1247),
                            IsDeleted = false,
                            Name = "Sea"
                        },
                        new
                        {
                            Id = new Guid("dc6aeae0-5c40-4085-8993-7d7b5db21121"),
                            CreatedDate = new DateTime(2025, 3, 31, 8, 11, 28, 57, DateTimeKind.Utc).AddTicks(1249),
                            IsDeleted = false,
                            Name = "Spring"
                        });
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.UserFavoriteArtist", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("UserFavoriteArtist");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.UserFavoritePainting", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PaintingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PaintingId");

                    b.HasIndex("PaintingId");

                    b.ToTable("UserFavoritePainting");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.ArtistImage", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistImage")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Biography", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Artist", "Artist")
                        .WithOne("Biography")
                        .HasForeignKey("ArtGallery.Domain.Entities.Biography", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.City", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Exhibition", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId");

                    b.Navigation("Museum");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Museum", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.City", "City")
                        .WithMany("Museums")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Painting", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Artist", "Artist")
                        .WithMany("Paintings")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtGallery.Domain.Entities.Genre", "Genre")
                        .WithMany("Paintings")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ArtGallery.Domain.Entities.Museum", "Museum")
                        .WithMany("Paintings")
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Artist");

                    b.Navigation("Genre");

                    b.Navigation("Museum");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingExhibition", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("Paintings")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtGallery.Domain.Entities.Painting", "Painting")
                        .WithMany("Exhibitions")
                        .HasForeignKey("PaintingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");

                    b.Navigation("Painting");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingImage", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Painting", "Painting")
                        .WithMany("PaintingImages")
                        .HasForeignKey("PaintingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Painting");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.PaintingTag", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Painting", "Painting")
                        .WithMany("Tags")
                        .HasForeignKey("PaintingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtGallery.Domain.Entities.Tag", "Tag")
                        .WithMany("Paintings")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Painting");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.UserFavoriteArtist", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Artist", "Artist")
                        .WithMany("UserFavoriteArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.UserFavoritePainting", b =>
                {
                    b.HasOne("ArtGallery.Domain.Entities.Painting", "Painting")
                        .WithMany("UserFavoritePaintings")
                        .HasForeignKey("PaintingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Painting");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Artist", b =>
                {
                    b.Navigation("ArtistImage");

                    b.Navigation("Biography")
                        .IsRequired();

                    b.Navigation("Paintings");

                    b.Navigation("UserFavoriteArtists");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.City", b =>
                {
                    b.Navigation("Museums");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Exhibition", b =>
                {
                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Genre", b =>
                {
                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Museum", b =>
                {
                    b.Navigation("Paintings");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Painting", b =>
                {
                    b.Navigation("Exhibitions");

                    b.Navigation("PaintingImages");

                    b.Navigation("Tags");

                    b.Navigation("UserFavoritePaintings");
                });

            modelBuilder.Entity("ArtGallery.Domain.Entities.Tag", b =>
                {
                    b.Navigation("Paintings");
                });
#pragma warning restore 612, 618
        }
    }
}
